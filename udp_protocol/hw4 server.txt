#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <string.h>
//server

#define MAXLINE    1000
#define BLOCK      1000

int eof=0;
		struct timeval optVal = {3, 0};
	int optLen = sizeof(optVal);
	int Fin=0;
	int wrt=0;
	
    struct sockaddr_in servaddr, cliaddr;
    char ebuf[]="";

    int s, nbyte, addrlen = sizeof(struct sockaddr);
    char buf[MAXLINE+1+1+10];
        char save[MAXLINE+1+1+10];
		FILE *stream; //파일 입출력
    	int i;
	int jimin=0;
	int checkbit=0;
	int startbit=0;
	int seqnum=1;
	char seqchar ;
	char filename[100];

int debinary(char *buf){
	
	int i;	
		//buf[BLOCK] == seq
		//bufBLOCK+1 ~ 10 -> binarybit
	int j;
	int result=0;
	int pow_val=1;
	for(i=0;i<10;i++){
	
		for(j=0; j<i ; j++)
		pow_val *= 2;
	
	if(buf[BLOCK+10-i]=='1'){
		result+=pow_val;
		printf(" \n\n====%d======\n\n",i);
		
	}
	
	pow_val = 1;
	}
		printf(" \n\n========================\n\n");
			printf(" \n\n========================\n\n");	
			for(i=0;i<10;i++)printf("  %d ",buf[BLOCK+1+i]);
			printf(" \n\n========================\n\n");
		printf(" \n\n========================\n\n");
	return result;
}
void eofCheck(int s, char* buf){
	
	sendto(s, &eof, 1, 0, (struct sockaddr *)&cliaddr, addrlen);
	if(!strncmp(buf,"0",1))
		{}else
		{
		
		if(recvfrom(s, buf, MAXLINE+10+1 , 0, (struct sockaddr *)&cliaddr, &addrlen) < 0) {
			perror("eof timeout");
			eofCheck(s,buf);
			}
		
			}
	return;
}

int main(int argc, char *argv[]) {

//---------------------------------------------------------------------------------------
    //파일명 포트번호
    if(argc != 2) { 
        printf("usage: %s port\n", argv[0]);
        exit(0);
    }
    
    //소켓 생성
	s= socket(PF_INET,SOCK_DGRAM,0);
	if( s==-1)
		printf("udp socket creation error\n");


    
    // 서버 구조
    memset(&cliaddr, 0, addrlen); 
    memset(&servaddr, 0, addrlen); 
    servaddr.sin_family = AF_INET;
    servaddr.sin_addr.s_addr = htonl(INADDR_ANY);
    servaddr.sin_port = htons(atoi(argv[1])); //argv[1]에서 port 번호 가지고 옴

    // 서버 로컬 주?念?bind()
    if(bind(s, (struct sockaddr *)&servaddr, addrlen) < 0) {
        perror("bind fail");
        exit(0);
    }
		setsockopt(s, SOL_SOCKET, SO_RCVTIMEO, &optVal, optLen);
//----------------------------------------------------------------------------------

while(1){
	
    while(1)
    {   
         puts("\n\nServer : waiting request.");
         //전송 받은 메시지 nbyte 저장

        if((nbyte = recvfrom(s, buf, MAXLINE+10+1 , 0, (struct sockaddr *)&cliaddr, &addrlen))<0)continue;
	
        printf("nbyte == %d\n",strlen(buf));
        printf("recved : %s",buf);

        if(nbyte< 0) {
            perror("recvfrom fail");
            exit(1);
        }
//===========================================================문제시 삭제.
        if(!strncmp(buf, "end of file", 12)) { //마지막 메시지가 end of file이면 종료
	            printf("file close");
	            fclose(stream); //stream 닫기  
		
         		
          
		
		if(sendto(s, &eof, 1, 0, (struct sockaddr *)&cliaddr, addrlen) < 0) {
			perror("send ACK to fail");
			}
		//eofCheck(s,buf);
 		/*recvfrom(s, buf, MAXLINE+10+1 , 0, (struct sockaddr *)&cliaddr, &addrlen);
		if(!strncmp(buf,"0",1))
		{}else
		{
		eofCheck(s,buf);

			}*/
		startbit=0;
		checkbit=0;
		printf(" NEXTFILE *******************************************\n");
		buf[0]='\0';
		save[0]='\0';
		strcpy(buf,ebuf);
		strcpy(filename,ebuf);
		nbyte=0;
		break; 

		// 다음파일로 넘어가기.


	        }



//test-------------------------------------------------------------------------------------------------------------------
	if(startbit==0){
		buf[nbyte] = 0; //마지막 값에 \0
		for(i=0;i<30;i++)
		{
			if(buf[i]=='\0'){
				checkbit=1;
				startbit=1;
				}
		}
		if((stream = fopen(buf, "wb")) == 0) {
       		 printf("Faile open error\n");
       		 exit(1);
   					 }
			printf("OPEN COMLETE ----------------------------------------------------------------------\n");		
	
		
			if(checkbit==1) { //마지막 메시지가 end of file이면 종료
				buf[0]='\0';
				startbit=1;
				continue;
		        	}
	}

//test-------------------------------------------------------------------------------------------------------------------------------------------------------
	       if(seqnum==0)
		seqchar='0';
	       else
		seqchar='1';
		
                       printf("=============================\n");
                   
	     if(buf[BLOCK]==seqchar){

		if(sendto(s, &seqchar, 1, 0, (struct sockaddr *)&cliaddr, addrlen) < 0) {
			perror("send ACK to fail");
			}


		printf("duplicate data\n");
		buf[0]='\0';
		save[0]='\0';
		continue;
		
		}
		        else{
		printf("success ack! %c,%c\n",buf[BLOCK],seqchar);

		if(sendto(s, &seqchar, 1, 0, (struct sockaddr *)&cliaddr, addrlen) < 0) {
			perror("send ACK to fail");
			}

		seqnum=(seqnum+1)%2;
		 if(seqnum==0)
		seqchar='0';
	       	else
		seqchar='1';
		}
		
	        printf("=============================\n");



	        if(!strncmp(buf, "end of file", 11)) { //마지막 메시지가 end of file이면 종료
	            printf("file close");
	            fclose(stream); //stream 닫기            
		startbit=0;
		checkbit=0;
		printf(" NEXTFILE *******************************************\n");
		buf[0]='\0';
		save[0]='\0';
		strcpy(buf,ebuf);
		strcpy(filename,ebuf);
		nbyte=0;
		break; 

		// 다음파일로 넘어가기.


	        } else {

		//printf("str len = %d and seq = %c \n ", strlen(buf),buf[nbyte]);
	        	//scpy(save,buf);
		//buf[strlen(buf)-1]='\0';
		//strcpy(buf,save);
		//printf("%d byte recv: %s\n",strlen(buf), buf);
		//printf("%s is save variable\n",save);
	                //printf("====================fput part=========================== : %s \n",buf);
		//for(i=0; i<BLOCK ; i++)
		//if(buf[i]=='0')
		wrt = debinary(buf);
		printf("\n\n i got a %d\n i got a nbytes:%d \n\n",wrt,nbyte);
		
		if(nbyte<BLOCK)
		fwrite(buf,1,wrt,stream);
		else
		fwrite(buf,1,wrt,stream);
		//fputs(buf, stream); //파일로 저장
		buf[0]='\0';
		save[0]='\0';
	        }// if  문 끝
	        puts("sendto complete\n");
	
    }//안에 while 끝
	recvfrom(s, &Fin, 1 , 0, (struct sockaddr *)&cliaddr, &addrlen);
	
	if(sendto(s, &Fin, 1, 0, (struct sockaddr *)&cliaddr, addrlen) < 0) {
			perror("send ACK to fail");
			}
	Fin=1;
	if(sendto(s, &Fin, 1, 0, (struct sockaddr *)&cliaddr, addrlen) < 0) {
			perror("send ACK to fail");
			}
	recvfrom(s, &Fin, 1 , 0, (struct sockaddr *)&cliaddr, &addrlen);
	if(Fin == 1)
	printf("Complete Client Exit\n");
	
	
}// 밖에 while 끝
    close(s);
	return 0;
}